# -*- coding: utf-8 -*-
"""Лабораторная_работа_№6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DyEKMlwNim-nEQuXKj8Bnz653hKUd55N
"""

import matplotlib.pyplot as plt


celsius = [[-67.0], [-34.0], [0], [54.0], [100]]
farenheit = [[-88.6], [-29.2], [32.0],[93.2],[129.2]]

import numpy as np

x_range = np.arange(-70, 120)
y_range = x_range*1.8+32

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, farenheit, label="Входные значения", color="green", marker="$f$")
plt.xlabel("celsius")
plt.ylabel("farenheit")
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius, farenheit):
  print(f"цельсия{c}= фаренгейт {f}")

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(celsius, farenheit)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
celsius_test = [[-50], [10], [30], [20], [10], [70], [87]]
farenheit_test = lr.predict(celsius_test)
farenheit_test

for c,f in zip(celsius_test, farenheit_test):
  print(f"цельсия {c} фаренгейта {f}" )

"""Задания обычной сложности

Задание 1
"""

import matplotlib.pyplot as plt

farenheit = [[0], [10],[20], [30]]
kelvin = [[255.372], [260.928], [266.483], [272.039]]

import numpy as np

x_range = np.arange(-70, 120)
y_range = x_range*1.8+32

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(farenheit, kelvin, label="Входные значения", color="green", marker="$f$")
plt.xlabel("farenheit")
plt.ylabel("kelvin")
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(farenheit, kelvin):
  print(f"фаренгейт{c}= кельвин{f}")

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(farenheit, kelvin)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
farenheit_test = [[-50], [10], [30], [20], [10], [70], [87]]
kelvin_test = lr.predict(celsius_test)
print(kelvin_test)

for c,f in zip(farenheit_test, kelvin_test):
  print(f"фаренгейта {c} кельвина {f}" )

"""Задание 3"""

import matplotlib.pyplot as plt
import numpy as np

names = ['group_a', 'group_b', 'group_c']
values = [1, 10, 100]

plt.figure(figsize=(9, 3))

plt.subplot(131)
plt.bar(names, values)
plt.subplot(132)
plt.scatter(names, values)
plt.subplot(133)
plt.plot(names, values)
plt.show()

"""Задание 4"""

import math
print(math.e)
print(math.pi)
print(math.nan)
print(math.factorial(7))
print(math.gcd(7, 64))

"""Задания с повышенной сложностью

"""

import matplotlib.pyplot as plt
import numpy as np

from mpl_toolkits.mplot3d import Axes3D  

x, y, z = np.indices((24, 16, 8))

transparent_cubes = (x < 5) & (y < 8) & (z < 8)
opaque_cubes_1 = ( x < 1) & (y == 0 ) & (z == 3)
opaque_cubes_2 = ( x == 5) & (y == 5 ) & (z == 5)

voxels1 = transparent_cubes
voxels2 = opaque_cubes_1 | opaque_cubes_2

colors1 = np.empty(voxels1.shape, dtype=object)
colors1[transparent_cubes] = 'white'


colors2 = np.empty(voxels2.shape, dtype=object)
colors2[opaque_cubes_1] = 'red'
colors2[opaque_cubes_2] = 'red'

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.voxels(voxels1, facecolors=colors1, edgecolor='none', alpha=0.4)
ax.voxels(voxels2, facecolors=colors2, edgecolor='none')

plt.show()

k = 4858450636189713423582095962494202044581400587983244549483093085061934704708809928450644769865524364849997247024915119110411605739177407856919754326571855442057210445735883681829823754139634338225199452191651284348332905131193199953502413758765239264874613394906870130562295813219481113685339535565290850023875092856892694555974281546386510730049106723058933586052544096664351265349363643957125565695936815184334857605266940161251266951421550539554519153785457525756590740540157929001765967965480064427829131488548259914721248506352686630476300
def from_k_to_bin(k: int) -> list:
	k //= 17
	binary = bin(k)[2:]
	binary = ("0" * (1802 - len(binary))) + binary
  lists = [[] for x in range(17)]

for x in range(1802):
	lists[-(x % 17)].append(binary[x])

<source lang="python">
image = Image.new("1", (106,17), (0)) 
draw = image.load()
for y in range(17):
	for x in range(106):
		image.putpixel(xy=(105-x,16-y), value=(int(lists[y][x]),)) 
image.save("image.png")